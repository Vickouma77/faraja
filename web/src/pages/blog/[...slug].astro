---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getCollection } from 'astro:content';

// Define the blog post type manually
interface BlogPost {
  slug: string;
  data: {
    title: string;
    description: string;
    pubDate: Date;
    author: string;
    tags: string[];
    featuredImage?: string;
  };
  render: () => Promise<{ Content: any }>;
}

interface Props {
  post: BlogPost;
}

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post: any) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post }: Props = Astro.props;
const { Content } = await post.render();

// Get related posts (same tags, excluding current post)
const allPosts: BlogPost[] = await getCollection('blog') as BlogPost[];
const relatedPosts: BlogPost[] = allPosts
  .filter((p: BlogPost) => p.slug !== post.slug)
  .filter((p: BlogPost) => p.data.tags.some((tag: string) => post.data.tags.includes(tag)))
  .slice(0, 3);
---

<Layout title={`${post.data.title} - Faraja Women Blog`} description={post.data.description}>
  <Header />

  <main class="min-h-screen bg-gray-50">
    <!-- Hero Section -->
    <section class="bg-gradient-to-r from-primary-600 to-accent-600 text-white py-16 lg:py-24">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div class="flex flex-wrap gap-2 justify-center mb-6">
          {post.data.tags.map((tag: string) => (
            <span class="inline-block bg-white/20 text-white text-sm px-3 py-1 rounded-full font-medium backdrop-blur-sm">
              {tag}
            </span>
          ))}
        </div>
        <h1 class="text-2xl sm:text-3xl lg:text-4xl font-bold mb-6 leading-tight">
          {post.data.title}
        </h1>
        <div class="flex items-center justify-center space-x-4 text-sm opacity-90">
          <span>By {post.data.author}</span>
          <span>â€¢</span>
          <time datetime={post.data.pubDate.toISOString()}>
            {post.data.pubDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}
          </time>
        </div>
      </div>
    </section>

    <!-- Featured Image -->
    {post.data.featuredImage && (
      <section class="py-8">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="rounded-2xl overflow-hidden shadow-2xl">
            <img
              src={post.data.featuredImage}
              alt={post.data.title}
              class="w-full h-64 sm:h-80 lg:h-96 object-cover"
            />
          </div>
        </div>
      </section>
    )}

    <!-- Article Content -->
    <article class="py-8 lg:py-16">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-2xl shadow-lg p-6 sm:p-8 lg:p-12">
          <Content />
        </div>
      </div>
    </article>

    <!-- Related Posts -->
    {relatedPosts.length > 0 && (
      <section class="py-16 bg-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-2xl sm:text-3xl font-bold text-center text-gray-900 mb-12">
            Related Articles
          </h2>
          <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            {relatedPosts.map((relatedPost) => (
              <article class="bg-gray-50 rounded-2xl p-6 hover:shadow-lg transition-all duration-300">
                {relatedPost.data.featuredImage && (
                  <div class="aspect-video rounded-lg overflow-hidden mb-4">
                    <img
                      src={relatedPost.data.featuredImage}
                      alt={relatedPost.data.title}
                      class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                    />
                  </div>
                )}
                <div class="flex flex-wrap gap-1 mb-3">
                  {relatedPost.data.tags.slice(0, 2).map((tag: string) => (
                    <span class="inline-block bg-primary-100 text-primary-800 text-xs px-2 py-1 rounded-full font-medium">
                      {tag}
                    </span>
                  ))}
                </div>
                <h3 class="text-lg font-bold text-gray-900 mb-2">
                  <a href={`/blog/${relatedPost.slug}`} class="hover:text-primary-600 transition-colors">
                    {relatedPost.data.title}
                  </a>
                </h3>
                <p class="text-gray-600 text-sm mb-3 line-clamp-2">
                  {relatedPost.data.description}
                </p>
                <div class="flex items-center justify-between text-xs text-gray-500">
                  <span>By {relatedPost.data.author}</span>
                  <time datetime={relatedPost.data.pubDate.toISOString()}>
                    {relatedPost.data.pubDate.toLocaleDateString('en-US', {
                      month: 'short',
                      day: 'numeric'
                    })}
                  </time>
                </div>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}

    <!-- Back to Blog -->
    <section class="py-8">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <a
          href="/blog"
          class="inline-flex items-center space-x-2 bg-primary-600 text-white px-6 py-3 rounded-full font-semibold hover:bg-primary-700 transition-colors"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          <span>Back to Blog</span>
        </a>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Article content styling */
  .prose {
    max-width: none;
  }

  .prose h1 {
    @apply text-2xl font-bold text-gray-900 mb-6 mt-8;
  }

  .prose h2 {
    @apply text-xl font-bold text-gray-900 mb-4 mt-6;
  }

  .prose h3 {
    @apply text-lg font-semibold text-gray-900 mb-3 mt-5;
  }

  .prose p {
    @apply text-gray-700 leading-relaxed mb-4;
  }

  .prose ul {
    @apply list-disc list-inside text-gray-700 mb-4 space-y-2;
  }

  .prose ol {
    @apply list-decimal list-inside text-gray-700 mb-4 space-y-2;
  }

  .prose li {
    @apply leading-relaxed;
  }

  .prose strong {
    @apply font-semibold text-gray-900;
  }

  .prose em {
    @apply italic;
  }

  .prose blockquote {
    @apply border-l-4 border-primary-500 pl-4 italic text-gray-600 my-6;
  }
</style>